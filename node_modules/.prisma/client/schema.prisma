generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String    @id @default(uuid())
  firstname        String    @db.VarChar(60)
  surname          String    @db.VarChar(200)
  cpf              String    @unique @db.VarChar(11)
  date_of_birthday DateTime  @db.Date
  enabled          Boolean   @default(true)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @updatedAt
  users            User[]

  @@map("employees")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique @db.VarChar(60)
  email       String    @unique @db.VarChar(60)
  enabled     Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @updatedAt
  employee_id String
  password    String?   @db.VarChar(200)
  employee    Employee  @relation(fields: [employee_id], references: [id])

  user_roles UserRole[]

  @@index([employee_id], name: "FK_Employee")
  @@map("users")
}

model Agency {
  id             String         @id @default(uuid())
  name           String
  agency_number  String
  agency_digit   String         @db.Char(1)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @updatedAt
  service_points ServicePoint[]

  @@map("agencies")
}

model ServicePoint {
  id         String    @id @default(uuid())
  name       String    @unique
  cnpj       String    @unique @db.VarChar(14)
  agency_id  String
  city_id    String
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @updatedAt
  agency     Agency    @relation(fields: [agency_id], references: [id])
  city       City      @relation(fields: [city_id], references: [id])

  @@index([agency_id], name: "agency_id")
  @@index([city_id], name: "city_id")
  @@map("service_points")
}

model State {
  id         String    @id @default(uuid())
  name       String    @unique
  uf         String    @unique @db.Char(2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @updatedAt
  City       City[]

  @@map("states")
}

model City {
  id           String         @id @default(uuid())
  name         String
  state_id     String
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @updatedAt
  state        State          @relation(fields: [state_id], references: [id])
  ServicePoint ServicePoint[]

  @@index([state_id], name: "state_id")
  @@map("cities")
}

model Role {
  id         String     @id @default(uuid())
  name       String     @unique
  user_roles UserRole[]

  @@map("roles")
}

model UserRole {
  id      String @id @default(uuid())
  user_id String
  role_id String
  user    User   @relation(fields: [user_id], references: [id])
  role    Role   @relation(fields: [role_id], references: [id])

  @@map("user_roles")
}
