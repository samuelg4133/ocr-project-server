
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.25.0
 * Query Engine version: 9b816b3aa13cc270074f172f30d6eda8a8ce867d
 */
Prisma.prismaVersion = {
  client: "2.25.0",
  engine: "9b816b3aa13cc270074f172f30d6eda8a8ce867d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.EmployeeScalarFieldEnum = makeEnum({
  id: 'id',
  firstname: 'firstname',
  surname: 'surname',
  cpf: 'cpf',
  date_of_birthday: 'date_of_birthday',
  enabled: 'enabled',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  email: 'email',
  enabled: 'enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  employee_id: 'employee_id',
  password: 'password'
});

exports.Prisma.AgencyScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  agency_number: 'agency_number',
  agency_digit: 'agency_digit',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ServicePointScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  cnpj: 'cnpj',
  agency_id: 'agency_id',
  city_id: 'city_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  uf: 'uf',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  state_id: 'state_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.UserRoleScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  role_id: 'role_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Employee: 'Employee',
  User: 'User',
  Agency: 'Agency',
  ServicePoint: 'ServicePoint',
  State: 'State',
  City: 'City',
  Role: 'Role',
  UserRole: 'UserRole'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
